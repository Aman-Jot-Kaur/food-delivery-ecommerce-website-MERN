openapi: 3.0.0
info:
  title: Groceries and Food Delivery API
  version: 1.0.0
  description: API for Groceries/Food Delivery MERN Website

paths:
  /users:
    post:
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the user.
                role:
                  type: string
                  enum: [customer, delivery_partner, restaurant_owner]
                  description: The user's role (customer, delivery partner, restaurant owner).
                password:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        "200":
         description: Successful creation of user
         content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: Message to show that the user was added successfully
        "500":
         description: Internal Server Error
         content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: An error message indicating an internal server error.
        "409":
         description: Conflict - User Already Exists
         content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: An error message indicating that a user with the given email already exists.
        
          
        

  /users/authenticate:
    post:
      summary: Authenticate and get user ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username or email of the user.
                password:
                  type: string
                  description: The user's password.
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Customer"
                  - $ref: "#/components/schemas/DeliveryPartner"
                  - $ref: "#/components/schemas/RestaurantOwner"
        "401":
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating invalid credentials.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating an internal server error.

  /owner/{userId}/restaurants:
    get:
      summary: Get all restaurants by a restaurant owner
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of restaurants owned by the specified owner
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that no restaurants were found for the specified owner.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating an internal server error.

    post:
      summary: Add a new restaurant by a restaurant owner
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        "201":
          description: Restaurant added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Restaurant"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating an internal server error.

  /owners/{ownerId}:
    put:
      summary: Update owner profile
      parameters:
        - in: path
          name: ownerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestaurantOwner"
      responses:
        "200":
          description: The owner profile was updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/RestaurantOwner"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message describing the issue with the request.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that the owner was not found.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating an internal server error.

  /delivery-partners/{deliveryPartnerId}:
    put:
      summary: Update delivery partner profile
      parameters:
        - in: path
          name: deliveryPartnerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeliveryPartner"
      responses:
        "200":
          description: The delivery partner profile was updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/DeliveryPartner"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message describing the issue with the request.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that the owner was not found.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating an internal server error.
  /delivery-person/orders/{orderId}/status:
     put:
      summary: Change Order Status by Order ID and Delivery Person ID
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order to update.
          schema:
            type: integer
        - name: deliveryPersonId
          in: query
          required: true
          description: The ID of the delivery person responsible for the order.
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newStatus:
                  type: string
                  description: The new status for the order.
                  enum: [pending, preparing, out_for_delivery, delivered, canceled]
      responses:
        '200':
          description: Successful update of order status
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message to confirm the status update.

  /admin/approve-delivery-partner/{deliveryPartnerId}:
    put:
      summary: Approve a delivery partner by admin
      parameters:
        - in: path
          name: deliveryPartnerId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Delivery partner approved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryPartner"
        "404":
          description: Delivery partner not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error

  /admin/approve-restaurant/{restaurantId}:
    put:
      summary: Approve a restaurant addition by admin
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Restaurant addition approved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error

  /restaurants/by-category/{category}:
    get:
      summary: Get a list of restaurants by category
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter restaurants by category (veg, non-veg, both)
      responses:
        "200":
          description: A list of restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"

        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error

        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error

  /restaurants/by-city/{city}:
    get:
      summary: Get a list of restaurants by city
      parameters:
        - in: query
          name: city
          schema:
            type: string
          description: Filter restaurants by city
      responses:
        "200":
          description: A list of restaurants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error

  /restaurants/{restaurantId}:
    get:
      summary: Get restaurant details
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Restaurant details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        "404":
          description: Restaurant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error

  /restaurants/{restaurantId}/menu:
    get:
      summary: Get the menu for a restaurant
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Restaurant menu
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MenuItem"
        "404":
          description: Restaurant menu not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Description of the error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Description of the error
    post:
      summary: Add a new menu item to the restaurant's menu
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuItem"
      responses:
        "201":
          description: Menu item added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuItem"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Description of the error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Description of the error

  /restaurants/{restaurantId}/menu/{menuItemId}:
    put:
      summary: Update a menu item
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
        - in: path
          name: menuItemId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuItem"
      responses:
        "200":
          description: Menu item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuItem"
        "404":
          description: Menu item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Description of the error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Description of the error

  /orders/{orderId}:
    get:
      summary: Get order details by order ID
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Description of the error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Description of the error

  /customers/{customerId}:
    put:
      summary: Update customer profile
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer"
      responses:
        "200":
          description: The customer profile was updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Customer"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message describing the issue with the request.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that the owner was not found.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating an internal server error.

  /customers/{customerId}/orders:
    get:
      summary: Get a list of orders for a customer
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of orders for the customer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that the owner was not found.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating an internal server error.

    post:
      summary: Create a new order for a customer
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that the owner was not found.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating an internal server error.

  /customers/{customerId}/orders/{orderId}/ratings:
    post:
      summary: Add a rating to a specific order
      parameters:
        - in: path
          name: customerId
          required: true
          schema:
            type: string
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  description: The rating value (1-5) for the order.
                comment:
                  type: string
                  description: An optional comment or review for the order.
      responses:
        "201":
          description: rating provided successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: invalid rating value
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that invalid rating value provided
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that the owner was not found.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating an internal server error
components:
  schemas:
    Restaurant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        city:
          type: string
        address:
          type: string
        cuisine:
          type: string
        operationalHours:
          type: string
        category:
          type: string
        menu:
          type: array
          items:
            $ref: "#/components/schemas/MenuItem"
        owner:
          $ref: "#/components/schemas/RestaurantOwner"

    MenuItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
        price:
          type: number
        preparationTime:
          type: number
        discountedPrice:
          type: number
        isVeg:
          type: boolean

    Order:
      type: object
      properties:
        id:
          type: string
        customer:
          $ref: "#/components/schemas/Customer"
        deliveryPartner:
          $ref: "#/components/schemas/DeliveryPartner"
        status:
          type: string
        complaint:
          $ref: "#/components/schemas/Complaint"
        totalPrice:
          type: number
        deliveryFee:
          type: number
        restaurant:
          $ref: "#/components/schemas/Restaurant"

    Complaint:
      type: object
      properties:
        order:
          type: string
        status:
          type: string
        id:
          type: string

    DeliveryPartner:
      type: object
      properties:
        idProof:
          type: string
        id:
          type: string
        name:
          type: string
        gender:
          type: string
        age:
          type: integer
        city:
          type: string
        workExperience:
          type: string
        totalOrdersDelivered:
          type: integer
        isAvailable:
          type: boolean
        averageRating:
          type: number
        contact:
          type: string
        approvedForDeliveryByAdmin:
          type: boolean

    Customer:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        gender:
          type: string
        age:
          type: integer
        city:
          type: string
        contact:
          type: string
        cart:
          type: array
          items:
            type: string
        orderHistory:
          type: array
          items:
            type: string
        numberOfOrders:
          type: integer
        specialMembers:
          type: array
          items:
            type: string
        favoritesList:
          type: array
          items:
            type: string
        averageRating:
          type: number

    RestaurantOwner:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: The name of the restaurant owner.
        contact:
          type: string
          description: Contact information for the restaurant owner.
        restaurantIds:
          type: array
          items:
            type: string #restaurant ids

